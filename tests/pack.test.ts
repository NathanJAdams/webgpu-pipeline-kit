import { packedCacheFactory } from '../src/packed-cache';

type Example = {
  a: number;
};

const createCache = () => packedCacheFactory.of<Example, true>(true, []);

describe('packing', () => {
  describe('adding', () => {
    test('no elements - no changes', () => {
      const packedCache = createCache();
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(0);
      expect(changes.values.length).toBe(0);
    });
    test('add 1 - one copy slice with one element', () => {
      const packedCache = createCache();
      const example: Example = { a: 123 };
      packedCache.add(example);
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(1);
      expect(changes.copySlices[0].length).toBe(1);
      expect(changes.copySlices[0].min).toBe(0);
      expect(changes.copySlices[0].toIndex).toBe(0);
      expect(changes.values.length).toBe(1);
      expect(changes.values[0].a).toBe(example.a);
    });
    test('add 3 - one copy slice with 3 elements', () => {
      const packedCache = createCache();
      const example0: Example = { a: 123 };
      const example1: Example = { a: 456 };
      const example2: Example = { a: 789 };
      packedCache.add(example0);
      packedCache.add(example1);
      packedCache.add(example2);
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(1);
      expect(changes.copySlices[0].length).toBe(3);
      expect(changes.copySlices[0].min).toBe(0);
      expect(changes.copySlices[0].toIndex).toBe(0);
      expect(changes.values.length).toBe(3);
      expect(changes.values[0].a).toBe(example0.a);
      expect(changes.values[1].a).toBe(example1.a);
      expect(changes.values[2].a).toBe(example2.a);
    });
    test('add 3, remove 1 - one copy slice with 2 elements', () => {
      const packedCache = createCache();
      const example0: Example = { a: 123 };
      const example1: Example = { a: 456 };
      const example2: Example = { a: 789 };
      const id0 = packedCache.add(example0);
      const id1 = packedCache.add(example1);
      const id2 = packedCache.add(example2);
      packedCache.remove(id1);
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(1);
      expect(changes.copySlices[0].length).toBe(2);
      expect(changes.copySlices[0].min).toBe(0);
      expect(changes.copySlices[0].toIndex).toBe(0);
      expect(changes.values.length).toBe(2);
      expect(changes.values[0].a).toBe(example0.a);
      expect(changes.values[1].a).toBe(example2.a);
    });
    test('add 3, mutate 1 - one copy slice with 2 elements', () => {
      const packedCache = createCache();
      const example0: Example = { a: 0 };
      const example1: Example = { a: 1 };
      const example2: Example = { a: 2 };
      const example1Mutated: Example = { a: 11 };
      const id0 = packedCache.add(example0);
      const id1 = packedCache.add(example1);
      const id2 = packedCache.add(example2);
      packedCache.mutate(id1, example1Mutated);
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(1);
      expect(changes.copySlices[0].length).toBe(3);
      expect(changes.copySlices[0].min).toBe(0);
      expect(changes.copySlices[0].toIndex).toBe(0);
      expect(changes.values.length).toBe(3);
      expect(changes.values[0].a).toBe(example0.a);
      expect(changes.values[1].a).toBe(example1Mutated.a);
      expect(changes.values[2].a).toBe(example2.a);
    });
  });
  describe('removing', () => {
    test('remove 1 from end - no changes', () => {
      const packedCache = createCache();
      const example0: Example = { a: 123 };
      const example1: Example = { a: 456 };
      const example2: Example = { a: 789 };
      const id0 = packedCache.add(example0);
      const id1 = packedCache.add(example1);
      const id2 = packedCache.add(example2);
      packedCache.pack();
      packedCache.remove(id2);
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(0);
      expect(changes.values.length).toBe(0);
    });
    test('remove 1 element 2 slots from the end - one copy slice with 1 element', () => {
      const packedCache = createCache();
      const example0: Example = { a: 0 };
      const example1: Example = { a: 1 };
      const example2: Example = { a: 2 };
      const example3: Example = { a: 3 };
      const id0 = packedCache.add(example0);
      const id1 = packedCache.add(example1);
      const id2 = packedCache.add(example2);
      const id3 = packedCache.add(example3);
      packedCache.pack();
      packedCache.remove(id1);
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(1);
      expect(changes.copySlices[0].length).toBe(1);
      expect(changes.copySlices[0].min).toBe(0);
      expect(changes.copySlices[0].toIndex).toBe(1);
      expect(changes.values.length).toBe(1);
      expect(changes.values[0].a).toBe(example3.a);
    });
    test('remove 1 element 2 slots from the end - one copy slice with 1 element even if mutated', () => {
      const packedCache = createCache();
      const example0: Example = { a: 0 };
      const example1: Example = { a: 1 };
      const example2: Example = { a: 2 };
      const example3: Example = { a: 3 };
      const example3Mutated: Example = { a: 33 };
      const id0 = packedCache.add(example0);
      const id1 = packedCache.add(example1);
      const id2 = packedCache.add(example2);
      const id3 = packedCache.add(example3);
      packedCache.pack();
      packedCache.remove(id1);
      packedCache.mutate(id3, example3Mutated);
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(1);
      expect(changes.copySlices[0].length).toBe(1);
      expect(changes.copySlices[0].min).toBe(0);
      expect(changes.copySlices[0].toIndex).toBe(1);
      expect(changes.values.length).toBe(1);
      expect(changes.values[0].a).toBe(example3Mutated.a);
    });
    test('remove non-existent element - no changes', () => {
      const packedCache = createCache();
      const example0: Example = { a: 0 };
      const example1: Example = { a: 1 };
      const example2: Example = { a: 2 };
      const example3: Example = { a: 3 };
      packedCache.add(example0);
      packedCache.add(example1);
      packedCache.add(example2);
      packedCache.add(example3);
      packedCache.pack();
      expect(() => packedCache.remove('non-existent')).toThrow();
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(0);
      expect(changes.values.length).toBe(0);
    });
  });
  describe('replacing', () => {
    test('replace 2 separate slots', () => {
      const packedCache = createCache();
      const example0: Example = { a: 0 };
      const example1: Example = { a: 1 };
      const example2: Example = { a: 2 };
      const example3: Example = { a: 3 };
      const example4: Example = { a: 4 };
      const example5: Example = { a: 5 };
      const example6: Example = { a: 6 };
      const id0 = packedCache.add(example0);
      const id1 = packedCache.add(example1);
      const id2 = packedCache.add(example2);
      const id3 = packedCache.add(example3);
      const id4 = packedCache.add(example4);
      packedCache.pack();
      packedCache.remove(id1);
      packedCache.remove(id3);
      const id5 = packedCache.add(example5);
      const id6 = packedCache.add(example6);
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(2);
      expect(changes.copySlices[0].length).toBe(1);
      expect(changes.copySlices[0].min).toBe(0);
      expect(changes.copySlices[0].toIndex).toBe(1);
      expect(changes.copySlices[1].length).toBe(1);
      expect(changes.copySlices[1].min).toBe(1);
      expect(changes.copySlices[1].toIndex).toBe(3);
      expect(changes.values.length).toBe(2);
      expect(changes.values[0].a).toBe(example5.a);
      expect(changes.values[1].a).toBe(example6.a);
    });
    test('replace 2 separate slots even if mutated', () => {
      const packedCache = createCache();
      const example0: Example = { a: 0 };
      const example1: Example = { a: 1 };
      const example2: Example = { a: 2 };
      const example3: Example = { a: 3 };
      const example4: Example = { a: 4 };
      const example5: Example = { a: 5 };
      const example5Mutated: Example = { a: 55 };
      const example6: Example = { a: 6 };
      const example6Mutated: Example = { a: 66 };
      const id0 = packedCache.add(example0);
      const id1 = packedCache.add(example1);
      const id2 = packedCache.add(example2);
      const id3 = packedCache.add(example3);
      const id4 = packedCache.add(example4);
      packedCache.pack();
      packedCache.mutate(id1, { a: 999 });
      packedCache.mutate(id3, { a: 999 });
      packedCache.remove(id1);
      packedCache.remove(id3);
      const id5 = packedCache.add(example5);
      const id6 = packedCache.add(example6);
      packedCache.mutate(id5, example5Mutated);
      packedCache.mutate(id6, example6Mutated);
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(2);
      expect(changes.copySlices[0].length).toBe(1);
      expect(changes.copySlices[0].min).toBe(0);
      expect(changes.copySlices[0].toIndex).toBe(1);
      expect(changes.copySlices[1].length).toBe(1);
      expect(changes.copySlices[1].min).toBe(1);
      expect(changes.copySlices[1].toIndex).toBe(3);
      expect(changes.values.length).toBe(2);
      expect(changes.values[0].a).toBe(example5Mutated.a);
      expect(changes.values[1].a).toBe(example6Mutated.a);
    });
    test('replace consecutive indexes with combined slices', () => {
      const packedCache = createCache();
      const example0: Example = { a: 0 };
      const example1: Example = { a: 1 };
      const example2: Example = { a: 2 };
      const example3: Example = { a: 3 };
      const example4: Example = { a: 4 };
      const example5: Example = { a: 5 };
      const example6: Example = { a: 6 };
      const replace10: Example = { a: 10 };
      const replace11: Example = { a: 11 };
      const replace12: Example = { a: 12 };
      const replace13: Example = { a: 13 };
      const id0 = packedCache.add(example0);
      const id1 = packedCache.add(example1);
      const id2 = packedCache.add(example2);
      const id3 = packedCache.add(example3);
      const id4 = packedCache.add(example4);
      const id5 = packedCache.add(example5);
      const id6 = packedCache.add(example6);
      packedCache.pack();
      packedCache.remove(id1);
      packedCache.remove(id2);
      packedCache.remove(id4);
      packedCache.remove(id5);
      const id10 = packedCache.add(replace10);
      const id11 = packedCache.add(replace11);
      const id12 = packedCache.add(replace12);
      const id13 = packedCache.add(replace13);
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(2);
      expect(changes.copySlices[0].length).toBe(2);
      expect(changes.copySlices[0].min).toBe(0);
      expect(changes.copySlices[0].toIndex).toBe(1);
      expect(changes.copySlices[1].length).toBe(2);
      expect(changes.copySlices[1].min).toBe(2);
      expect(changes.copySlices[1].toIndex).toBe(4);
      expect(changes.values.length).toBe(4);
      expect(changes.values[0].a).toBe(replace10.a);
      expect(changes.values[1].a).toBe(replace11.a);
      expect(changes.values[2].a).toBe(replace12.a);
      expect(changes.values[3].a).toBe(replace13.a);
    });
  });
  describe('mutating', () => {
    test('mutated elements are packed', () => {
      const example0: Example = { a: 0 };
      const example1: Example = { a: 1 };
      const example2: Example = { a: 2 };
      const example0Mutated: Example = { a: 10 };
      const example1Mutated: Example = { a: 11 };
      const example2Mutated: Example = { a: 12 };
      const packedCache = createCache();
      const id0 = packedCache.add(example0);
      const id1 = packedCache.add(example1);
      const id2 = packedCache.add(example2);
      const changes0 = packedCache.pack();
      expect(changes0.copySlices.length).toBe(1);
      expect(changes0.copySlices[0].length).toBe(3);
      expect(changes0.copySlices[0].min).toBe(0);
      expect(changes0.copySlices[0].toIndex).toBe(0);
      expect(changes0.values.length).toBe(3);
      expect(changes0.values[0].a).toBe(example0.a);
      expect(changes0.values[1].a).toBe(example1.a);
      expect(changes0.values[2].a).toBe(example2.a);

      packedCache.mutate(id0, example0Mutated);
      packedCache.mutate(id1, example1Mutated);
      const changes1 = packedCache.pack();
      expect(changes1.copySlices.length).toBe(1);
      expect(changes1.copySlices[0].length).toBe(2);
      expect(changes1.copySlices[0].min).toBe(0);
      expect(changes1.copySlices[0].toIndex).toBe(0);
      expect(changes1.values.length).toBe(2);
      expect(changes1.values[0].a).toBe(example0Mutated.a);
      expect(changes1.values[1].a).toBe(example1Mutated.a);

      packedCache.mutate(id2, example2Mutated);
      const changes2 = packedCache.pack();
      expect(changes2.copySlices.length).toBe(1);
      expect(changes2.copySlices[0].length).toBe(1);
      expect(changes2.copySlices[0].min).toBe(0);
      expect(changes2.copySlices[0].toIndex).toBe(2);
      expect(changes2.values.length).toBe(1);
      expect(changes2.values[0].a).toBe(example2Mutated.a);
    });
    test('mutate non-existent element - no changes', () => {
      const packedCache = createCache();
      const example0: Example = { a: 0 };
      const example1: Example = { a: 1 };
      const example2: Example = { a: 2 };
      packedCache.add(example0);
      packedCache.add(example1);
      packedCache.add(example2);
      packedCache.pack();
      expect(() => packedCache.mutate('non-existent', { a: 999 })).toThrow();
      const changes = packedCache.pack();
      expect(changes.copySlices.length).toBe(0);
      expect(changes.values.length).toBe(0);
    });
  });
});
