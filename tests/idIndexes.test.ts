import { describe, test, expect } from 'vitest';

import { setLogLevel } from '../src/logging';
import { packedCacheFactory } from '../src/packed-cache';

type Example = {
};

setLogLevel('WARN');

const createCache = () => packedCacheFactory.of<Example, true>(true, []);

describe.skip('idIndexes', () => {
  describe('adding', () => {
    test('an element can be added and found again only after pack()', () => {
      const packedCache = createCache();
      const id = packedCache.add({});
      expect(packedCache.indexOf(id)).toBe(-1);
      packedCache.pack();
      expect(packedCache.indexOf(id)).toBe(0);
    });
    test('elements are added at consecutive indexes', () => {
      const packedCache = createCache();
      const id0 = packedCache.add({});
      const id1 = packedCache.add({});
      const id2 = packedCache.add({});
      const id3 = packedCache.add({});
      const id4 = packedCache.add({});
      const id5 = packedCache.add({});
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      expect(packedCache.indexOf(id3)).toBe(3);
      expect(packedCache.indexOf(id4)).toBe(4);
      expect(packedCache.indexOf(id5)).toBe(5);
    });
    test('adding and immediately removing an element before pack() will not use up the consecutive index', () => {
      const packedCache = createCache();
      const id0 = packedCache.add({});
      const id1 = packedCache.add({});
      const id2 = packedCache.add({});
      const id3 = packedCache.add({});
      packedCache.remove(id0);
      packedCache.remove(id1);
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(-1);
      expect(packedCache.indexOf(id1)).toBe(-1);
      expect(packedCache.indexOf(id2)).toBe(0);
      expect(packedCache.indexOf(id3)).toBe(1);
    });
    test('adding and immediately mutating an element will still add it at the same index', () => {
      const packedCache = createCache();
      const id0 = packedCache.add({});
      const id1 = packedCache.add({});
      const id2 = packedCache.add({});
      const id3 = packedCache.add({});
      packedCache.mutate(id1, {});
      packedCache.mutate(id2, {});
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      expect(packedCache.indexOf(id3)).toBe(3);
    });
  });
  describe('removing', () => {
    test('elements can be removed and still be found until pack()', () => {
      const packedCache = createCache();
      expect(packedCache.count()).toBe(0);
      const id0 = packedCache.add({});
      const id1 = packedCache.add({});
      const id2 = packedCache.add({});
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      packedCache.remove(id0);
      packedCache.remove(id1);
      packedCache.remove(id2);
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(-1);
      expect(packedCache.indexOf(id1)).toBe(-1);
      expect(packedCache.indexOf(id2)).toBe(-1);
    });
    test('elements can be mutated and removed and still be found until pack()', () => {
      const packedCache = createCache();
      expect(packedCache.count()).toBe(0);
      const id0 = packedCache.add({});
      const id1 = packedCache.add({});
      const id2 = packedCache.add({});
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      packedCache.mutate(id0, {});
      packedCache.mutate(id1, {});
      packedCache.mutate(id2, {});
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      packedCache.remove(id0);
      packedCache.remove(id1);
      packedCache.remove(id2);
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(-1);
      expect(packedCache.indexOf(id1)).toBe(-1);
      expect(packedCache.indexOf(id2)).toBe(-1);
    });
    test('removed elements will be replaced by entities taken from the end working backwards', () => {
      const packedCache = createCache();
      const id0 = packedCache.add({});
      const id1 = packedCache.add({});
      const id2 = packedCache.add({});
      const id3 = packedCache.add({});
      const id4 = packedCache.add({});
      const id5 = packedCache.add({});
      packedCache.pack();
      packedCache.remove(id1);
      packedCache.remove(id2);
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(-1);
      expect(packedCache.indexOf(id2)).toBe(-1);
      expect(packedCache.indexOf(id3)).toBe(3);
      expect(packedCache.indexOf(id4)).toBe(2);
      expect(packedCache.indexOf(id5)).toBe(1);
    });
    test('removed elements will be replaced by entities taken from the end working backwards even if they have been mutated', () => {
      const packedCache = createCache();
      const id0 = packedCache.add({});
      const id1 = packedCache.add({});
      const id2 = packedCache.add({});
      const id3 = packedCache.add({});
      const id4 = packedCache.add({});
      const id5 = packedCache.add({});
      const id6 = packedCache.add({});
      packedCache.pack();
      packedCache.remove(id1);
      packedCache.remove(id2);
      packedCache.mutate(id4, {});
      packedCache.mutate(id5, {});
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(-1);
      expect(packedCache.indexOf(id2)).toBe(-1);
      expect(packedCache.indexOf(id3)).toBe(3);
      expect(packedCache.indexOf(id4)).toBe(4);
      expect(packedCache.indexOf(id5)).toBe(2);
      expect(packedCache.indexOf(id6)).toBe(1);
    });
    test('removing non-existent elements does not change indexes even after pack()', () => {
      const packedCache = createCache();
      const id0 = packedCache.add({});
      const id1 = packedCache.add({});
      const id2 = packedCache.add({});
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      expect(() => packedCache.remove('non-existent')).toThrow();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
    });
  });
  describe('replacing', () => {
    describe('added = removed', () => {
      test('added replace removed', () => {
        const packedCache = createCache();
        const id0 = packedCache.add({});
        const id1 = packedCache.add({});
        const id2 = packedCache.add({});
        packedCache.pack();
        packedCache.remove(id1);
        const id3 = packedCache.add({});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(-1);
        expect(packedCache.indexOf(id2)).toBe(2);
        expect(packedCache.indexOf(id3)).toBe(1);
      });
      test('added and mutated replace removed', () => {
        const packedCache = createCache();
        const id0 = packedCache.add({});
        const id1 = packedCache.add({});
        const id2 = packedCache.add({});
        packedCache.pack();
        packedCache.remove(id1);
        const id3 = packedCache.add({});
        packedCache.mutate(id3, {});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(-1);
        expect(packedCache.indexOf(id2)).toBe(2);
        expect(packedCache.indexOf(id3)).toBe(1);
      });
      test('added replace mutated and removed', () => {
        const packedCache = createCache();
        const id0 = packedCache.add({});
        const id1 = packedCache.add({});
        const id2 = packedCache.add({});
        packedCache.pack();
        packedCache.mutate(id1, {});
        packedCache.remove(id1);
        const id3 = packedCache.add({});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(-1);
        expect(packedCache.indexOf(id2)).toBe(2);
        expect(packedCache.indexOf(id3)).toBe(1);
      });
      test('added and mutated replace mutated and removed', () => {
        const packedCache = createCache();
        const id0 = packedCache.add({});
        const id1 = packedCache.add({});
        const id2 = packedCache.add({});
        packedCache.pack();
        packedCache.mutate(id1, {});
        packedCache.remove(id1);
        const id3 = packedCache.add({});
        packedCache.mutate(id3, {});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(-1);
        expect(packedCache.indexOf(id2)).toBe(2);
        expect(packedCache.indexOf(id3)).toBe(1);
      });
    });
    describe('added > removed', () => {
      test('added replace removed, extra are appended', () => {
        const packedCache = createCache();
        const id0 = packedCache.add({});
        const id1 = packedCache.add({});
        const id2 = packedCache.add({});
        const id3 = packedCache.add({});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(1);
        expect(packedCache.indexOf(id2)).toBe(2);
        expect(packedCache.indexOf(id3)).toBe(3);
        packedCache.remove(id1);
        packedCache.remove(id2);
        const id4 = packedCache.add({});
        const id5 = packedCache.add({});
        const id6 = packedCache.add({});
        const id7 = packedCache.add({});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(-1);
        expect(packedCache.indexOf(id2)).toBe(-1);
        expect(packedCache.indexOf(id3)).toBe(3);
        expect(packedCache.indexOf(id4)).toBe(1);
        expect(packedCache.indexOf(id5)).toBe(2);
        expect(packedCache.indexOf(id6)).toBe(4);
        expect(packedCache.indexOf(id7)).toBe(5);
      });
      test('added and mutated replace removed, extra are appended', () => {
        const packedCache = createCache();
        const id0 = packedCache.add({});
        const id1 = packedCache.add({});
        const id2 = packedCache.add({});
        const id3 = packedCache.add({});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(1);
        expect(packedCache.indexOf(id2)).toBe(2);
        expect(packedCache.indexOf(id3)).toBe(3);
        packedCache.remove(id1);
        packedCache.remove(id2);
        const id4 = packedCache.add({});
        const id5 = packedCache.add({});
        const id6 = packedCache.add({});
        const id7 = packedCache.add({});
        packedCache.mutate(id5, {});
        packedCache.mutate(id6, {});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(-1);
        expect(packedCache.indexOf(id2)).toBe(-1);
        expect(packedCache.indexOf(id3)).toBe(3);
        expect(packedCache.indexOf(id4)).toBe(1);
        expect(packedCache.indexOf(id5)).toBe(2);
        expect(packedCache.indexOf(id6)).toBe(4);
        expect(packedCache.indexOf(id7)).toBe(5);
      });
      test('added replace mutated and removed, extra are appended', () => {
        const packedCache = createCache();
        const id0 = packedCache.add({});
        const id1 = packedCache.add({});
        const id2 = packedCache.add({});
        const id3 = packedCache.add({});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(1);
        expect(packedCache.indexOf(id2)).toBe(2);
        expect(packedCache.indexOf(id3)).toBe(3);
        packedCache.mutate(id1, {});
        packedCache.remove(id1);
        packedCache.remove(id2);
        const id4 = packedCache.add({});
        const id5 = packedCache.add({});
        const id6 = packedCache.add({});
        const id7 = packedCache.add({});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(-1);
        expect(packedCache.indexOf(id2)).toBe(-1);
        expect(packedCache.indexOf(id3)).toBe(3);
        expect(packedCache.indexOf(id4)).toBe(1);
        expect(packedCache.indexOf(id5)).toBe(2);
        expect(packedCache.indexOf(id6)).toBe(4);
        expect(packedCache.indexOf(id7)).toBe(5);
      });
      test('added and mutated replace mutated and removed, extra are appended', () => {
        const packedCache = createCache();
        const id0 = packedCache.add({});
        const id1 = packedCache.add({});
        const id2 = packedCache.add({});
        const id3 = packedCache.add({});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(1);
        expect(packedCache.indexOf(id2)).toBe(2);
        expect(packedCache.indexOf(id3)).toBe(3);
        packedCache.mutate(id1, {});
        packedCache.mutate(id2, {});
        packedCache.remove(id1);
        packedCache.remove(id2);
        const id4 = packedCache.add({});
        const id5 = packedCache.add({});
        const id6 = packedCache.add({});
        const id7 = packedCache.add({});
        packedCache.mutate(id4, {});
        packedCache.mutate(id7, {});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(-1);
        expect(packedCache.indexOf(id2)).toBe(-1);
        expect(packedCache.indexOf(id3)).toBe(3);
        expect(packedCache.indexOf(id4)).toBe(1);
        expect(packedCache.indexOf(id5)).toBe(2);
        expect(packedCache.indexOf(id6)).toBe(4);
        expect(packedCache.indexOf(id7)).toBe(5);
      });
    });
    describe('added < removed', () => {
      test('added replace removed, removed are replaced from the end', () => {
        const packedCache = createCache();
        const id0 = packedCache.add({});
        const id1 = packedCache.add({});
        const id2 = packedCache.add({});
        const id3 = packedCache.add({});
        const id4 = packedCache.add({});
        const id5 = packedCache.add({});
        const id6 = packedCache.add({});
        const id7 = packedCache.add({});
        const id8 = packedCache.add({});
        packedCache.pack();
        packedCache.remove(id1);
        packedCache.remove(id2);
        packedCache.remove(id3);
        const id9 = packedCache.add({});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(-1);
        expect(packedCache.indexOf(id2)).toBe(-1);
        expect(packedCache.indexOf(id3)).toBe(-1);
        expect(packedCache.indexOf(id4)).toBe(4);
        expect(packedCache.indexOf(id5)).toBe(5);
        expect(packedCache.indexOf(id6)).toBe(6);
        expect(packedCache.indexOf(id7)).toBe(3);
        expect(packedCache.indexOf(id8)).toBe(2);
        expect(packedCache.indexOf(id9)).toBe(1);
      });
      test('added and mutated replace removed, removed are replaced from the end', () => {
        const packedCache = createCache();
        const id0 = packedCache.add({});
        const id1 = packedCache.add({});
        const id2 = packedCache.add({});
        const id3 = packedCache.add({});
        const id4 = packedCache.add({});
        const id5 = packedCache.add({});
        const id6 = packedCache.add({});
        const id7 = packedCache.add({});
        const id8 = packedCache.add({});
        packedCache.pack();
        packedCache.remove(id1);
        packedCache.remove(id2);
        packedCache.remove(id3);
        const id9 = packedCache.add({});
        packedCache.mutate(id9, {});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(-1);
        expect(packedCache.indexOf(id2)).toBe(-1);
        expect(packedCache.indexOf(id3)).toBe(-1);
        expect(packedCache.indexOf(id4)).toBe(4);
        expect(packedCache.indexOf(id5)).toBe(5);
        expect(packedCache.indexOf(id6)).toBe(6);
        expect(packedCache.indexOf(id7)).toBe(3);
        expect(packedCache.indexOf(id8)).toBe(2);
        expect(packedCache.indexOf(id9)).toBe(1);
      });
      test('added replace removed, removed are replaced from the end even if mutated', () => {
        const packedCache = createCache();
        const id0 = packedCache.add({});
        const id1 = packedCache.add({});
        const id2 = packedCache.add({});
        const id3 = packedCache.add({});
        const id4 = packedCache.add({});
        const id5 = packedCache.add({});
        const id6 = packedCache.add({});
        const id7 = packedCache.add({});
        const id8 = packedCache.add({});
        packedCache.pack();
        packedCache.remove(id1);
        packedCache.remove(id2);
        packedCache.remove(id3);
        const id9 = packedCache.add({});
        packedCache.mutate(id7, {});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(-1);
        expect(packedCache.indexOf(id2)).toBe(-1);
        expect(packedCache.indexOf(id3)).toBe(-1);
        expect(packedCache.indexOf(id4)).toBe(4);
        expect(packedCache.indexOf(id5)).toBe(5);
        expect(packedCache.indexOf(id6)).toBe(6);
        expect(packedCache.indexOf(id7)).toBe(3);
        expect(packedCache.indexOf(id8)).toBe(2);
        expect(packedCache.indexOf(id9)).toBe(1);
      });
      test('added and mutated replace removed, removed are replaced from the end even if mutated', () => {
        const packedCache = createCache();
        const id0 = packedCache.add({});
        const id1 = packedCache.add({});
        const id2 = packedCache.add({});
        const id3 = packedCache.add({});
        const id4 = packedCache.add({});
        const id5 = packedCache.add({});
        const id6 = packedCache.add({});
        const id7 = packedCache.add({});
        const id8 = packedCache.add({});
        packedCache.pack();
        packedCache.remove(id1);
        packedCache.remove(id2);
        packedCache.remove(id3);
        const id9 = packedCache.add({});
        packedCache.mutate(id9, {});
        packedCache.mutate(id7, {});
        packedCache.pack();
        expect(packedCache.indexOf(id0)).toBe(0);
        expect(packedCache.indexOf(id1)).toBe(-1);
        expect(packedCache.indexOf(id2)).toBe(-1);
        expect(packedCache.indexOf(id3)).toBe(-1);
        expect(packedCache.indexOf(id4)).toBe(4);
        expect(packedCache.indexOf(id5)).toBe(5);
        expect(packedCache.indexOf(id6)).toBe(6);
        expect(packedCache.indexOf(id7)).toBe(3);
        expect(packedCache.indexOf(id8)).toBe(2);
        expect(packedCache.indexOf(id9)).toBe(1);
      });
    });
  });
  describe('mutating', () => {
    test('mutating elements does not change indexes even after pack()', () => {
      const packedCache = createCache();
      const id0 = packedCache.add({});
      const id1 = packedCache.add({});
      const id2 = packedCache.add({});
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      packedCache.mutate(id0, {});
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      packedCache.mutate(id1, {});
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      packedCache.mutate(id2, {});
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
    });
    test('mutating non-existent elements does not change indexes even after pack()', () => {
      const packedCache = createCache();
      const id0 = packedCache.add({});
      const id1 = packedCache.add({});
      const id2 = packedCache.add({});
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      expect(() => packedCache.mutate('non-existent', {})).toThrow();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
      packedCache.pack();
      expect(packedCache.indexOf(id0)).toBe(0);
      expect(packedCache.indexOf(id1)).toBe(1);
      expect(packedCache.indexOf(id2)).toBe(2);
    });
  });
});
